<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.example.sendmail.service.impl.MailMapper">
<!-- 
			namespace는 Mapper의 풀경로를 의미한다.
      Ctrl+F로 단어 변경시 경로는 제외해서 하기!!!!!!  sendmail을 mail로 하면 
      RuntimeException case :: RuntimeException 
			Invalid bound statement (not found) 와 같은 애리가 남!!!!!!!!!!!!!
      -->
      

<!-- 
			Class/TypeAlias 'MailVO' not found. -> config에 설정이 되어있지 않아서 생기는 오류
  	  * sql-map-config.xml -> ibatis인 sample의 SQL을 가리키고
 		  * sql-mapper-config.xml-> 이게 mybatis인 Mail_SQL를 설정하는 것. 즉 여기서 MailVO를 설정해줘야 한다.
 -->

<!-- 
		  context-datasource에서 Mysql db 연동
 -->

	<resultMap id="mail" type="egovframework.example.sendmail.service.MailVO">
		<result property="idx" column="idx"/>
		<result property="title" column="title"/>
		<result property="contents" column="contents"/>
		<result property="sender" column="sender"/>
		<result property="receiver" column="receiver"/>
		<result property="indate" column="indate"/>
		<result property="boxName" column="boxName"/>
	</resultMap> 
<!-- resultMap은 안쓸껀데 이렇게도 던질 수 있다. -->


	<!-- 주소록 -->
	<resultMap id="Address" type="egovframework.example.sendmail.service.AddressVO">
		<result property="idx" column="idx"/>
		<result property="workplace" column="workplace"/>
		<result property="dept" column="dept"/>
		<result property="addressName" column="addressName"/>
		<result property="emailAddress" column="emailAddress"/>
		<result property="pNumber" column="pNumber"/>
		<result property="memo" column="memo"/>
		<result property="indate" column="indate"/>
		<result property="userName2" column="userName2"/>
		<result property="userId" column="userId"/>
	</resultMap> 






	<insert id="insertMail" parameterType="mailVO">

			INSERT INTO tb_mail
				( 													<!-- idx는 자동증가되므로 넣을 필요가 없다. -->
					title
				  , contents
				  , sender
				  , receiver 
				  , indate )
			VALUES (
				  #{title, jdbcType=VARCHAR}
				  , #{contents, jdbcType=VARCHAR}
				  , #{sender, jdbcType=VARCHAR}
				  , #{receiver, jdbcType=VARCHAR}
				  , SYSDATE() )

<!-- 값이 없을때 널값을 넣어도 오류가 안나는 mybatis 규칙 : 
		 value1 = #{value1, jdbcType=VARCHAR} VO에 int값 설정시 INT로 설정-->
		 
	</insert>
	
	
	<!-- wholebox 상세  -->
  	<select id="detailwholebox"  resultMap="mail">

			SELECT
				A.idx as idx
				, A.title as title         
				, A.contents as contents
				, A.sender as sender          
				, A.receiver as receiver
			FROM 
				tb_mail A
			WHERE A.idx=#{idx}
	
	</select>
	
	
	

	<update id="updateMail">

			UPDATE tb_mail
			SET title=#{title, jdbcType=VARCHAR}
				, contents=#{contents, jdbcType=VARCHAR}
				  WHERE idx=#{idx}

	</update>

	<delete id="deleteMail">

			DELETE FROM tb_mail
			WHERE idx=#{idx}

	</delete>

	<select id="selectMail" resultMap="mail">

			SELECT
				A.idx
				, A.title
				, A.contents
				, IFNULL(A.count, 0) as count <!-- mariaDB IFNULL은  oracle의 NVL임~~ -->
				, A.writer
				, A.indate
				, B.user_name as writerNm
			FROM 
				tb_mail A 
			LEFT JOIN 
				tb_user B
			ON
				A.writer = B.user_id 
			WHERE A.idx=#{idx}

	</select>
	<!-- select는 나중에 테이블이 추가될 수 있기에 Alias를 쓰면 좋다. -->
	<!-- resultMap이나 resultType이나 아무거나 쓰면 된다. -->

	<select id="selectMailList" parameterType="mailVO" resultType="egovMap">

			SELECT
				A.idx
				, A.title
				, A.contents
				, A.sender
				, A.receiver
				, A.indate
			FROM 
				tb_mail A 
			WHERE 
				A.receiver=#{userName} OR A.sender=#{userName} 

	</select>
	
	<!--  inbox 변경 사용  -->
	<select id="selectInboxList" parameterType="mailVO" resultType="egovMap">

			SELECT
				A.idx
				, A.title
				, A.contents
				, A.sender
				, A.receiver
				, A.indate
			FROM
				tb_mail A 
			WHERE A.sender=#{userName}

	</select>
		
	<!-- inbox 원래 쿼리 	
	<select id="selectInboxList" parameterType="mailVO" resultType="egovMap">

			SELECT
				A.idx
				, A.title
				, A.contents
				, A.sender
				, A.receiver
				, A.indate
			FROM 
				tb_mail A 
			WHERE A.receiver=#{userName}

	</select>  -->
	
	
	<select id="selectOutboxList" parameterType="mailVO" resultType="egovMap">

			SELECT
				A.idx
				, A.title
				, A.contents
				, A.sender
				, A.receiver
				, A.indate
			FROM 
				tb_mail A 
			WHERE A.sender=#{userName}
	</select>
	
	<select id="selectMailListTotCnt" parameterType="mailVO" resultType="int">

			SELECT COUNT(*) totcnt
			FROM tb_mail
			WHERE 1=1
			<if test="searchKeyword != null and searchKeyword != ''">
		        <choose>
		            <when test="searchCondition == 0">
									AND ID LIKE '%' || #{searchKeyword} || '%'
								</when>
		            <when test="searchCondition == 1">
									AND	NAME LIKE '%' || #{searchKeyword} || '%'
								</when>
				</choose>
			</if>
	</select>
	
	<select id="selectLoginCheck" parameterType="mailVO" resultType="String">

			SELECT user_name
			FROM tb_user
			WHERE 1=1
			AND user_id = #{userId}
			AND password = #{password}

	</select>
	
	
	
	
	<!-- mailbox메일함 입력 -->
 	<insert id="insertMailbox" parameterType="mailVO">

			INSERT INTO tb_mailbox
				( 													<!-- idx는 자동증가되므로 넣을 필요 없음. -->
					boxName
				  , user_id )
			VALUES (
				  #{boxName, jdbcType=VARCHAR}
				  , #{userId, jdbcType=VARCHAR} ) 
	</insert>  
	
	
	<!-- 메일함추가하는 목록 조회 -->
	<select id="mboxaddlist" parameterType="mailVO" resultType="egovMap">

			SELECT
				A.idx
				, A.boxName
				, A.user_id
			FROM 
				tb_mailbox A
			WHERE 
				A.user_id=#{userId}

	</select>
	
	
	<!-- 메일함 상세 보기(수정페이지) -->
  	<select id="detailmailbox" resultMap="mail">  

			SELECT
				A.idx as idx
 				, A.boxName as boxName       
				, A.user_id as userId
			FROM 
				tb_mailbox A
			WHERE A.idx=#{idx}
	
	</select>	
	
	
	<!-- 메일함 수정 -->
   	<update id="updateMailbox">

			UPDATE tb_mailbox
			SET boxName=#{boxName, jdbcType=VARCHAR}
												
			WHERE idx=#{idx}

	</update> 
	 
	
	<!-- 메일함 삭제  -->
	<delete id="deleteMailbox">

			DELETE FROM tb_mailbox
			WHERE idx=#{idx}

	</delete>
	
	
	<!-- mailbox메일함 셀렉트박스 조회   -->
	<select id="selectMboxAdd" parameterType="mailVO" resultType="egovMap">

			SELECT
				A.boxName
			FROM 
				tb_mailbox A
			WHERE 
				A.user_id=#{userId}

	</select>
	
	
		<!-- 메일 검색조회 페이지 -->
	<select id="searchmail" parameterType="mailVO" resultType="egovMap">
				
			SELECT
				A.idx
				, A.title
				, A.contents
				, A.sender
				, A.receiver
				, A.indate
			FROM 
				tb_mail A 
			WHERE A.sender=#{userName}

	</select>  
	

	
	
	<!-- 주소록 -->
	
	<!-- 주소록 목록 조회 -->
	<select id="addresslist" parameterType="addressVO" resultType="egovMap">

			SELECT
				A.idx
				, A.workplace
				, A.dept
				, A.address_name
				, A.email_address
				, A.p_number
				, A.memo
				, A.indate
				, A.user_name2
			FROM 
				tb_addressbook A
			WHERE 
				A.user_name2=#{userName}

	</select> 
	
	
	<!-- 주소록 입력 -->
 	<insert id="insertAddress" parameterType="addressVO">

			INSERT INTO tb_addressbook
				( 													<!-- idx는 자동증가되므로 넣을 필요 없음. -->
					workplace
				  , dept
				  , address_name
				  , email_address
				  , p_number
				  , memo 
				  , indate 
				  , user_name2 )
			VALUES (
				  #{workplace, jdbcType=VARCHAR}
				  , #{dept, jdbcType=VARCHAR}
				  , #{addressName, jdbcType=VARCHAR}      
				  , #{emailAddress, jdbcType=VARCHAR}
				  , #{pNumber, jdbcType=VARCHAR}
				  , #{memo, jdbcType=VARCHAR}
				  , SYSDATE()
				  , #{userName2, jdbcType=VARCHAR} ) 
	</insert>    
<!-- 값이 없을때 널값을 넣어도 오류가 안나는 mybatis 규칙 : 
		 value1 = #{value1, jdbcType=VARCHAR} VO에 int값 설정시 INT로 설정 -->
		 
		 
	<!-- 주소록 상세 보기(수정페이지) -->
  	<select id="detailAddress"  resultMap="Address">

			SELECT
				A.idx as idx
				, A.workplace as workplace
				, IFNULL(A.dept, "") as dept          
				, A.address_name as addressName
				, A.email_address as emailAddress
				, IFNULL(A.p_number, "") as pNumber   
				, IFNULL(A.memo, "") as memo          
				, A.indate as indate
			FROM 
				tb_addressbook A
			WHERE A.idx=#{idx}
	
	</select>	 

	
	<!-- 주소록 수정 -->	
  	<update id="updateAddress">

			UPDATE tb_addressbook
			SET workplace=#{workplace, jdbcType=VARCHAR}
				, dept=#{dept, jdbcType=VARCHAR}
				, address_name=#{addressName, jdbcType=VARCHAR}
				, email_address=#{emailAddress, jdbcType=VARCHAR}
				, p_number=#{pNumber, jdbcType=VARCHAR}
				, memo=#{memo, jdbcType=VARCHAR}
				
			WHERE idx=#{idx}

	</update> 
	
	<!-- 주소록 삭제  -->
	<delete id="deleteAddress">

			DELETE FROM tb_addressbook
			WHERE idx=#{idx}

	</delete>
	
	
	

	
	

</mapper>




